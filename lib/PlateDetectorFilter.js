/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var checkType      = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;

var Transaction = kurentoClient.TransactionsManager.Transaction;

var Filter = kurentoClient.register.abstracts.Filter;


function noop(error) {
  if (error) console.trace(error);
};


/**
 * Create a {@link module:platedetector.PlateDetectorFilter PlateDetectorFilter}
 *
 * @classdesc
 *  PlateDetectorFilter interface. This type of {@link 
 *  module:core/abstracts.Endpoint Endpoint} detects
 *  vehicle plates in a video feed.
 *
 * @extends module:core/abstracts.Filter
 *
 * @constructor module:platedetector.PlateDetectorFilter
 *
 * @fires {@link module:platedetector#event:PlateDetected PlateDetected}
 */
function PlateDetectorFilter(){
  PlateDetectorFilter.super_.call(this);
};
inherits(PlateDetectorFilter, Filter);


//
// Public methods
//


/**
 * Configures the average width of the license plates in the image represented 
 * as an image percentage.
 *
 * @alias module:platedetector.PlateDetectorFilter.setPlateWidthPercentage
 *
 * @param {external:Number} plateWidthPercentage
 *  average width of the license plates represented as an image percentage 
 *  [0..1].
 *
 * @param {module:platedetector.PlateDetectorFilter~setPlateWidthPercentageCallback} [callback]
 *
 * @return {external:Promise}
 */
PlateDetectorFilter.prototype.setPlateWidthPercentage = function(plateWidthPercentage, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('float', 'plateWidthPercentage', plateWidthPercentage, {required: true});

  var params = {
    plateWidthPercentage: plateWidthPercentage,
  };

  return this._invoke(transaction, 'setPlateWidthPercentage', params, callback);
};
/**
 * @callback module:platedetector.PlateDetectorFilter~setPlateWidthPercentageCallback
 * @param {external:Error} error
 */


/**
 * @alias module:platedetector.PlateDetectorFilter.constructorParams
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the parent {@link module:core.MediaPipeline MediaPipeline} of this {@link 
 *  module:platedetector.PlateDetectorFilter PlateDetectorFilter}
 */
PlateDetectorFilter.constructorParams = {
  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  },
};

/**
 * @alias module:platedetector.PlateDetectorFilter.events
 *
 * @extends module:core/abstracts.Filter.events
 */
PlateDetectorFilter.events = Filter.events.concat(['PlateDetected']);


/**
 * Checker for {@link platedetector.PlateDetectorFilter}
 *
 * @memberof module:platedetector
 *
 * @param {external:String} key
 * @param {module:platedetector.PlateDetectorFilter} value
 */
function checkPlateDetectorFilter(key, value)
{
  if(!(value instanceof PlateDetectorFilter))
    throw ChecktypeError(key, PlateDetectorFilter, value);
};


module.exports = PlateDetectorFilter;

PlateDetectorFilter.check = checkPlateDetectorFilter;
